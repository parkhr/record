name: Deploy Spring Boot to EC2

on:
  push:
    branches:
      - main  # main 브랜치 푸시 시 배포

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. JDK 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application.yml 세팅
      - name: Create application.yml from secret
        run: |
          echo "=== 기존 파일 확인 ==="
          ls -la backend/demo/src/main/resources/ 2>/dev/null || echo "resources 디렉토리가 없습니다"
          
          echo "=== 기존 application.yml 제거 (있는 경우) ==="
          rm -f backend/demo/src/main/resources/application.yml
          
          echo "=== 디렉토리 생성 ==="
          mkdir -p backend/demo/src/main/resources
          
          echo "=== 새로운 application.yml 생성 ==="
          echo "${{ secrets.APPLICATION_YML }}" > backend/demo/src/main/resources/application.yml
          
          echo "=== application.yml 파일 생성 확인 ==="
          ls -la backend/demo/src/main/resources/
          echo "=== application.yml 파일 크기 확인 ==="
          wc -l backend/demo/src/main/resources/application.yml
          echo "=== application.yml 첫 3줄 확인 (디버깅용) ==="
          head -3 backend/demo/src/main/resources/application.yml | sed 's/password:.*/password: [HIDDEN]/' || echo "파일을 읽을 수 없습니다"

      # 4. 빌드
      - name: Build with Gradle
        run: |
          cd backend/demo
          chmod +x gradlew
          ./gradlew clean build -x test

      # 5. EC2에 JAR 파일 전송
      - name: Copy jar to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: backend/demo/build/libs/demo-0.0.1-SNAPSHOT.jar
          target: /home/ec2-user/
          overwrite: true

      # 6. EC2에서 실행
      - name: Execute deploy script on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            pkill -f 'demo-0.0.1-SNAPSHOT.jar' || true
            sleep 3
            nohup java -jar /home/ec2-user/demo-0.0.1-SNAPSHOT.jar > /home/ec2-user/app.log 2>&1 &