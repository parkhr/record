name: Deploy Spring Boot to EC2

on:
  push:
    branches:
      - main  # main 브랜치 푸시 시 배포

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. JDK 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application.yml 세팅
      - name: Create application.yml from secret
        run: |
          echo "=== 기존 파일 확인 ==="
          ls -la backend/demo/src/main/resources/ 2>/dev/null || echo "resources 디렉토리가 없습니다"
          
          echo "=== 기존 application.yml 제거 (있는 경우) ==="
          rm -f backend/demo/src/main/resources/application.yml
          
          echo "=== 디렉토리 생성 ==="
          mkdir -p backend/demo/src/main/resources
          
          echo "=== 새로운 application.yml 생성 ==="
          echo "${{ secrets.APPLICATION_YML }}" > backend/demo/src/main/resources/application.yml
          
          echo "=== application.yml 파일 생성 확인 ==="
          ls -la backend/demo/src/main/resources/
          echo "=== application.yml 파일 크기 확인 ==="
          wc -l backend/demo/src/main/resources/application.yml
          echo "=== application.yml 첫 3줄 확인 (디버깅용) ==="
          head -3 backend/demo/src/main/resources/application.yml | sed 's/password:.*/password: [HIDDEN]/' || echo "파일을 읽을 수 없습니다"

      # 4. 빌드
      - name: Build with Gradle
        run: |
          cd backend/demo
          chmod +x gradlew
          ./gradlew clean build -x test

      # 5. EC2에 JAR 파일 전송
      - name: Copy jar to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: backend/demo/build/libs/demo-0.0.1-SNAPSHOT.jar
          target: /home/ec2-user/
          overwrite: true

      # 6. EC2에서 기존 프로세스 종료
      - name: Stop existing application on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          command_timeout: 2m
          script: |
            echo "=== 현재 실행 중인 Java 프로세스 확인 ==="
            ps aux | grep java | grep -v grep || echo "실행 중인 Java 프로세스가 없습니다"
            
            echo "=== 기존 demo 애플리케이션 종료 시도 ==="
            DEMO_PID=$(pgrep -f 'demo-0.0.1-SNAPSHOT.jar' || echo "")
            if [ -n "$DEMO_PID" ]; then
              kill $DEMO_PID
            fi
            
            echo "=== 프로세스 종료 대기 (최대 15초) ==="
            for i in {1..15}; do
              if ! pgrep -f 'demo-0.0.1-SNAPSHOT.jar' > /dev/null; then
                echo "프로세스가 정상적으로 종료되었습니다 (${i}초 소요)"
                break
              fi
              sleep 1
            done
            
            echo "=== 최종 프로세스 상태 확인 ==="
            ps aux | grep demo-0.0.1-SNAPSHOT.jar | grep -v grep || echo "모든 관련 프로세스가 종료되었습니다"

      # 7. EC2에서 새 애플리케이션 시작
      - name: Start new application on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          command_timeout: 5m
          script: |
            echo "=== JAR 파일 존재 확인 ==="
            if [ ! -f "/home/ec2-user/backend/demo/build/libs/demo-0.0.1-SNAPSHOT.jar" ]; then
              echo "ERROR: JAR 파일이 존재하지 않습니다"
              exit 1
            fi
            ls -la /home/ec2-user/backend/demo/build/libs/demo-0.0.1-SNAPSHOT.jar
            
            echo "=== 새 애플리케이션 시작 ==="
            cd /home/ec2-user/backend/demo/build/libs
            nohup java -jar demo-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
            
            echo "애플리케이션 PID: $!"
            
            echo "=== 애플리케이션 시작 대기 (30초) ==="
            sleep 30
            
            echo "=== 프로세스 상태 확인 ==="
            ps aux | grep demo-0.0.1-SNAPSHOT.jar | grep -v grep || echo "WARNING: 프로세스가 실행되지 않고 있습니다"